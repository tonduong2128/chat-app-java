/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tonduong.view;

import com.tonduong.component.custom.ColumnPanel;
import com.tonduong.component.custom.RoundedPanel;
import com.tonduong.database.dao.DRoom;
import com.tonduong.database.dao.DJoinroom;
import com.tonduong.database.dao.DMessage;
import com.tonduong.database.dao.DUser;
import com.tonduong.database.pojo.Room;
import com.tonduong.database.pojo.Joinroom;
import com.tonduong.database.pojo.Message;
import com.tonduong.database.pojo.User;
import com.tonduong.model.struct.Action;
import com.tonduong.model.struct.Boxchat;
import com.tonduong.model.struct.TypeAction;
import com.tonduong.model.struct.TypeMessage;
import com.tonduong.model.struct.UserUI;
import com.tonduong.socket.ClientSocket;
import com.tonduong.socket.ServerSocket;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Stack;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author ADMIN
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Call
     */
    public Home() {
        initComponents();
        initData();
        config();
        customerComponents();
        handleActions();
        config();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        con_chatbox = new javax.swing.JPanel();
        boxchat = new javax.swing.JPanel();
        input_mes = new javax.swing.JTextField();
        btn_sendMes = new javax.swing.JButton();
        btn_sendFile = new javax.swing.JButton();
        btn_close = new javax.swing.JButton();
        boxchat_content = new javax.swing.JPanel();
        btn_callVideo = new javax.swing.JButton();
        nameBoxchat = new javax.swing.JLabel();
        boxchat2 = new javax.swing.JPanel();
        input_mes2 = new javax.swing.JTextField();
        btn_sendMes2 = new javax.swing.JButton();
        btn_sendFile2 = new javax.swing.JButton();
        btn_close2 = new javax.swing.JButton();
        boxchat2_content = new javax.swing.JPanel();
        btn_callVideo2 = new javax.swing.JButton();
        nameBoxchat2 = new javax.swing.JLabel();
        con_search = new javax.swing.JPanel();
        lb_search = new javax.swing.JLabel();
        input_search = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        con_history = new javax.swing.JPanel();
        history = new javax.swing.JPanel();
        lb_history = new javax.swing.JLabel();
        con_toll = new javax.swing.JPanel();
        btn_joinGroup = new javax.swing.JButton();
        btn_createGroup = new javax.swing.JButton();
        title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        boxchat.setBackground(new java.awt.Color(255, 255, 255));

        input_mes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btn_sendMes.setText("Gửi");

        btn_sendFile.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_sendFile.setText("File");

        btn_close.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_close.setText("Xóa");

        boxchat_content.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout boxchat_contentLayout = new javax.swing.GroupLayout(boxchat_content);
        boxchat_content.setLayout(boxchat_contentLayout);
        boxchat_contentLayout.setHorizontalGroup(
            boxchat_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        boxchat_contentLayout.setVerticalGroup(
            boxchat_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
        );

        btn_callVideo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_callVideo.setText("Gọi video");

        nameBoxchat.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nameBoxchat.setText(" ");

        javax.swing.GroupLayout boxchatLayout = new javax.swing.GroupLayout(boxchat);
        boxchat.setLayout(boxchatLayout);
        boxchatLayout.setHorizontalGroup(
            boxchatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxchatLayout.createSequentialGroup()
                .addComponent(btn_sendFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(input_mes, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_sendMes))
            .addGroup(boxchatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameBoxchat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_callVideo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_close))
            .addComponent(boxchat_content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        boxchatLayout.setVerticalGroup(
            boxchatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxchatLayout.createSequentialGroup()
                .addGroup(boxchatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_close)
                    .addComponent(btn_callVideo)
                    .addComponent(nameBoxchat))
                .addGap(4, 4, 4)
                .addComponent(boxchat_content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(boxchatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(input_mes, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btn_sendMes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_sendFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        boxchat2.setBackground(new java.awt.Color(255, 255, 255));

        input_mes2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btn_sendMes2.setText("Gửi");

        btn_sendFile2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_sendFile2.setText("File");

        btn_close2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_close2.setText("Xóa");

        boxchat2_content.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout boxchat2_contentLayout = new javax.swing.GroupLayout(boxchat2_content);
        boxchat2_content.setLayout(boxchat2_contentLayout);
        boxchat2_contentLayout.setHorizontalGroup(
            boxchat2_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        boxchat2_contentLayout.setVerticalGroup(
            boxchat2_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        btn_callVideo2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_callVideo2.setText("Gọi video");

        nameBoxchat2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nameBoxchat2.setText(" ");

        javax.swing.GroupLayout boxchat2Layout = new javax.swing.GroupLayout(boxchat2);
        boxchat2.setLayout(boxchat2Layout);
        boxchat2Layout.setHorizontalGroup(
            boxchat2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxchat2Layout.createSequentialGroup()
                .addComponent(btn_sendFile2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(input_mes2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_sendMes2))
            .addGroup(boxchat2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameBoxchat2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_callVideo2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_close2))
            .addComponent(boxchat2_content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        boxchat2Layout.setVerticalGroup(
            boxchat2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxchat2Layout.createSequentialGroup()
                .addGroup(boxchat2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_close2)
                    .addComponent(btn_callVideo2)
                    .addComponent(nameBoxchat2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxchat2_content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(boxchat2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(input_mes2, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btn_sendMes2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_sendFile2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout con_chatboxLayout = new javax.swing.GroupLayout(con_chatbox);
        con_chatbox.setLayout(con_chatboxLayout);
        con_chatboxLayout.setHorizontalGroup(
            con_chatboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, con_chatboxLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(boxchat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxchat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        con_chatboxLayout.setVerticalGroup(
            con_chatboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(con_chatboxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(con_chatboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxchat2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boxchat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        lb_search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lb_search.setText("Tìm kiếm bạn bè:");

        input_search.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btn_search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_search.setText("Tìm");

        javax.swing.GroupLayout con_searchLayout = new javax.swing.GroupLayout(con_search);
        con_search.setLayout(con_searchLayout);
        con_searchLayout.setHorizontalGroup(
            con_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(con_searchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(con_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_search)
                    .addGroup(con_searchLayout.createSequentialGroup()
                        .addComponent(input_search, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_search)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        con_searchLayout.setVerticalGroup(
            con_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(con_searchLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lb_search, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(con_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input_search, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        history.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout historyLayout = new javax.swing.GroupLayout(history);
        history.setLayout(historyLayout);
        historyLayout.setHorizontalGroup(
            historyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );
        historyLayout.setVerticalGroup(
            historyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );

        lb_history.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lb_history.setText("Lịch sử trò chuyện:");

        btn_joinGroup.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_joinGroup.setText("Tham gia nhóm");

        btn_createGroup.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_createGroup.setText("Tạo nhóm");

        javax.swing.GroupLayout con_tollLayout = new javax.swing.GroupLayout(con_toll);
        con_toll.setLayout(con_tollLayout);
        con_tollLayout.setHorizontalGroup(
            con_tollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, con_tollLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_createGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_joinGroup)
                .addGap(6, 6, 6))
        );
        con_tollLayout.setVerticalGroup(
            con_tollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, con_tollLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(con_tollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_joinGroup)
                    .addComponent(btn_createGroup)))
        );

        javax.swing.GroupLayout con_historyLayout = new javax.swing.GroupLayout(con_history);
        con_history.setLayout(con_historyLayout);
        con_historyLayout.setHorizontalGroup(
            con_historyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, con_historyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lb_history)
                .addGap(63, 63, 63))
            .addGroup(con_historyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(con_historyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(history, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(con_toll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        con_historyLayout.setVerticalGroup(
            con_historyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(con_historyLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lb_history)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(con_toll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(history, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        title.setText("ChatBook");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(con_history, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(title)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(con_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(con_chatbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(con_history, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(con_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(con_chatbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boxchat;
    private javax.swing.JPanel boxchat2;
    private javax.swing.JPanel boxchat2_content;
    private javax.swing.JPanel boxchat_content;
    private javax.swing.JButton btn_callVideo;
    private javax.swing.JButton btn_callVideo2;
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_close2;
    private javax.swing.JButton btn_createGroup;
    private javax.swing.JButton btn_joinGroup;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_sendFile;
    private javax.swing.JButton btn_sendFile2;
    private javax.swing.JButton btn_sendMes;
    private javax.swing.JButton btn_sendMes2;
    private javax.swing.JPanel con_chatbox;
    private javax.swing.JPanel con_history;
    private javax.swing.JPanel con_search;
    private javax.swing.JPanel con_toll;
    private javax.swing.JPanel history;
    private javax.swing.JTextField input_mes;
    private javax.swing.JTextField input_mes2;
    private javax.swing.JTextField input_search;
    private javax.swing.JLabel lb_history;
    private javax.swing.JLabel lb_search;
    private javax.swing.JLabel nameBoxchat;
    private javax.swing.JLabel nameBoxchat2;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    private JDialog jFrameSearch;
    private Home _this;
    private List<Room> listRoomData;
    private Stack<Boxchat> listBoxActive;
    private List<JPanel> listRoomHistory;
    private ColumnPanel contentBoxchat;
    private ColumnPanel contentBoxchat2;
    private HashMap<String, ClientSocket> listSocketCL;
    private JPanel containerSearch;
    private JFileChooser fileDialog;

    private void initData() {
        listRoomData = new ArrayList<>();
        listBoxActive = new Stack<>();
        listRoomHistory = new ArrayList<>();
        listSocketCL = new HashMap<>();
        _this = this;

        List<Joinroom> listJoin = DJoinroom.find(UserUI.getId());
        for (Joinroom joinGroup : listJoin) {
            Room room = DRoom.find(joinGroup.getIdGroup());
            listRoomData.add(room);
            createSocket(room);
        }
        jFrameSearch = null;
        _this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                switch (JOptionPane.showConfirmDialog(_this,
                        "Are you sure you want to close this window?", "Close Window?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE)) {
                    case JOptionPane.YES_OPTION:
                        for (Map.Entry<String, ClientSocket> entry : listSocketCL.entrySet()) {
                            ClientSocket val = entry.getValue();
                            try {
                                val.close();
                            } catch (Exception e) {
                            }
                        }
                        listSocketCL.clear();
                        ServerSocket.close();
                        System.exit(0);
                        break;
                    case JOptionPane.NO_OPTION:
                        _this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                        break;
                    default:
                        throw new AssertionError();
                }
            }
        }
        );
    }

    private void createSocket(Room room) {
        ClientSocket cs = new ClientSocket();
        try {
            cs.start(room.getPort());
            ClientSocket pre = listSocketCL.put(room.getId(), cs);
            System.out.println(room.getId());
            if (pre != null) {
                pre.close();
            }
        } catch (IOException ex) {
            try {
                User user = DUser.find(UserUI.getId());
                room.setPort(user.getPort());
                room.setIp(user.getIp());
                DRoom.update(room);
                System.err.println("My host is rom: " + room.getId());
                cs.start(room.getPort());
                ClientSocket pre = listSocketCL.put(room.getId(), cs);
                if (pre != null) {
                    pre.close();
                }
            } catch (IOException ex1) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }

    }

    private void config() {
        setTitle("Chat Book");
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void customerComponents() {
        contentBoxchat = customBoxchat(boxchat_content);
        contentBoxchat2 = customBoxchat(boxchat2_content);
        customHistory(history);
        boxchat.setVisible(false);
        boxchat2.setVisible(false);
    }

    private void handleActions() {
        //remove tool search when resize
        this.addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                toggelSearch(false, new ArrayList<User>());
            }
        });

        //remove tool search when click over
        this.addMouseListener(new AddEventRemoveSearch());

        // handle action search
        btn_search.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<User> list = DUser.search(input_search.getText());
                toggelSearch(true, list);
            }
        });

        //handel action search onchage
        input_search.getDocument().addDocumentListener(new EventOnchageSearch());

        // handle action call video
        btn_callVideo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new Call();
            }
        });
        btn_callVideo2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new Call();
            }
        });

        //handle click send
        btn_sendMes.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.err.println("Data box 1: " + input_mes.getText());
                input_mes.setText("");
            }
        });
        btn_sendMes2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.err.println("Data box 2: " + input_mes.getText());
                input_mes.setText("");
            }
        });

        //handle create group
        btn_createGroup.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new CreateGroup(_this);
            }
        });
        //handle join group
        btn_joinGroup.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new JoinGroup(_this);
            }
        });

        //click close chatbox
        final int BOX_CHAT_1 = 1;
        final int BOX_CHAT_2 = 2;

        //btn handle choose file
        fileDialog = new JFileChooser();
        btn_sendFile.addActionListener(new HandleClickSendFile(BOX_CHAT_1));
        btn_sendFile2.addActionListener(new HandleClickSendFile(BOX_CHAT_2));

        //click choose in list chat
        for (int i = 0; i < listRoomHistory.size(); i++) {
            listRoomHistory.get(i).addMouseListener(
                    new HandelClickChat(listRoomData.get(i).getId(), listRoomData.get(i).getName())
            );
        }

        btn_close.addActionListener(new HandleClickCloseChat(BOX_CHAT_1));
        btn_close2.addActionListener(new HandleClickCloseChat(BOX_CHAT_2));

        //click send message
        btn_sendMes.addActionListener(new HandleClickSend(BOX_CHAT_1));
        btn_sendMes2.addActionListener(new HandleClickSend(BOX_CHAT_2));
    }

    private class HandleClickSendFile implements ActionListener {

        private int index;

        public HandleClickSendFile(int index) {
            this.index = index;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Boxchat boxchat = listBoxActive.elementAt(listBoxActive.size() - index);
            int returnVal = fileDialog.showOpenDialog(_this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = fileDialog.getSelectedFile();
                    String text = new String(Files.readAllBytes(Paths.get(file.getPath())), StandardCharsets.UTF_8);
                    handleSendFile(boxchat, file, text);
                } catch (IOException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("Open command cancelled by user. File 1");
            }
        }

    }

    void handleSendFile(Boxchat boxchat, File file, String text) {
        System.err.println("Boxchat: " + boxchat.getName() + " sendfile: " + file.getName());

        Message message = new Message(
                UUID.randomUUID().toString(),
                UserUI.getId(),
                boxchat.getId(),
                text,
                new Timestamp(System.currentTimeMillis()));

        message.setFileName(file.getName());

        Action<Message> action = new Action<>(TypeAction.CLIENT_TO_SERVER, message);

        String data = listSocketCL.get(boxchat.getId()).sendMessage(action);
        System.err.println("Try 1");
        if (data == null) {
            System.err.println("Try 2");
//                listSocketCL.remove(boxchat.getId());

            try {
                System.err.println("Try 3");
                ClientSocket cs = new ClientSocket();
                Room r = DRoom.find(boxchat.getId());
                cs.start(r.getPort());
                data = cs.sendMessage(action);
                if (data == null) {
                    throw new IOException("Erorrrrrrrrrrr");
                }
                listSocketCL.put(boxchat.getId(), cs);
            } catch (IOException exx) {
                System.err.println("Try 4");
                System.err.println(exx);
                List<Joinroom> listJoinroom = DJoinroom.findByIdRoomWithUserOnline(boxchat.getId());
                List<String> listUserSend = new ArrayList<>();

                for (Joinroom joinroom : listJoinroom) {
                    listUserSend.add(joinroom.getIdUser());
                }
                User user = DUser.find(UserUI.getId());
                Room room = DRoom.find(boxchat.getId());
                room.setPort(user.getPort());
                DRoom.update(room);

                Action<Message> ac = new Action<>(TypeAction.SERVER_TO_CLIENT, message);
                List<Joinroom> listJoin = DJoinroom.find(UserUI.getId());
                for (Joinroom joinGroup : listJoin) {
                    Room r = DRoom.find(joinGroup.getIdGroup());
                    listRoomData.add(r);
                    createSocket(r);
                }
                ServerSocket.sendMessage(ac, listUserSend);
            }
        }
    }

    private class HandleClickSend implements ActionListener {

        private int index;

        public HandleClickSend(int index) {
            this.index = index;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Boxchat boxchat = listBoxActive.elementAt(listBoxActive.size() - index);
            String content = "";
            if (index == 1) {
                content = input_mes.getText();
                input_mes.setText("");
            } else {
                content = input_mes2.getText();
                input_mes2.setText("");
            }
            if (content.trim().equals("")) {
                return;
            }
            Message message = new Message(
                    UUID.randomUUID().toString(),
                    UserUI.getId(),
                    boxchat.getId(),
                    content,
                    new Timestamp(System.currentTimeMillis()));

            Action<Message> action = new Action<>(TypeAction.CLIENT_TO_SERVER, message);

            System.out.println("ID: " + boxchat.getId());
            String data = listSocketCL.get(boxchat.getId()).sendMessage(action);
            System.err.println("Try 1");
            if (data == null) {
                System.err.println("Try 2");
//                listSocketCL.remove(boxchat.getId());
                try {
                    System.err.println("Try 3");
                    ClientSocket cs = new ClientSocket();
                    Room r = DRoom.find(boxchat.getId());
                    cs.start(r.getPort());
                    data = cs.sendMessage(action);
                    if (data == null) {
                        throw new IOException("Erorrrrrrrrrrr");
                    }
                    listSocketCL.put(boxchat.getId(), cs);
                } catch (IOException exx) {
                    System.err.println("Try 4");
                    System.err.println(exx);
                    List<Joinroom> listJoinroom = DJoinroom.findByIdRoomWithUserOnline(boxchat.getId());
                    List<String> listUserSend = new ArrayList<>();

                    for (Joinroom joinroom : listJoinroom) {
                        listUserSend.add(joinroom.getIdUser());
                    }
                    User user = DUser.find(UserUI.getId());
                    Room room = DRoom.find(boxchat.getId());
                    room.setPort(user.getPort());
                    DRoom.update(room);

                    Action<Message> ac = new Action<>(TypeAction.SERVER_TO_CLIENT, message);
                    List<Joinroom> listJoin = DJoinroom.find(UserUI.getId());
                    for (Joinroom joinGroup : listJoin) {
                        Room r = DRoom.find(joinGroup.getIdGroup());
                        listRoomData.add(r);
                        createSocket(r);
                    }
                    ServerSocket.sendMessage(ac, listUserSend);
                }
            }
        }
    }

    private class HandleClickCloseChat implements ActionListener {

        private int index;

        public HandleClickCloseChat(int index) {
            this.index = index;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            listBoxActive.remove(listBoxActive.size() - index);
            updateBoxchatActive();
        }
    }

    private class HandelClickChat implements MouseListener {

        private String idGroup;
        private String name;

        public HandelClickChat(String idGroup, String name) {
            this.idGroup = idGroup;
            this.name = name;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            Boxchat boxNow = null;
            for (int i = 0; i < listBoxActive.size(); i++) {
                if (listBoxActive.get(i).getId().equals(idGroup)) {
                    boxNow = listBoxActive.remove(i);
                    break;
                }
            }
            if (null != boxNow) {
                listBoxActive.push(boxNow);
            } else {
                List<Message> listMessage = DMessage.find(idGroup);
                Boxchat boxchat = new Boxchat(idGroup, name, listMessage);
                listBoxActive.push(boxchat);
            }
            updateBoxchatActive();
            System.err.println("Click History id group:" + idGroup);
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }

    private void updateBoxchat(ColumnPanel cp, Boxchat bc) {
        if (bc != null) {
            cp.removeAll();
            List<Message> listMessage = bc.getListMessage();
            for (Message message : listMessage) {
                addLineContent(bc, cp, message);
            }
        }
        cp.updateUI();
    }

    private void updateBoxchatActive() {
        Boxchat b1 = null;
        Boxchat b2 = null;
        try {
            b1 = listBoxActive.get(listBoxActive.size() - 1);
            b2 = listBoxActive.get(listBoxActive.size() - 2);
        } catch (Exception e) {
            System.err.println(e.getLocalizedMessage());
        }

        if (b1 == null && b2 == null) {
            boxchat.setVisible(false);
            boxchat2.setVisible(false);
        } else if (b1 != null && b2 == null) {
            nameBoxchat.setText(b1.getName());
            updateBoxchat(contentBoxchat, b1);
            boxchat.setVisible(true);
            boxchat2.setVisible(false);
        } else if (b1 == null && b2 != null) {
            nameBoxchat.setText(b2.getName());
            updateBoxchat(contentBoxchat2, b2);
            boxchat.setVisible(false);
            boxchat2.setVisible(true);
        } else if (b2 != null && b1 != null) {
            nameBoxchat.setText(b1.getName());
            updateBoxchat(contentBoxchat, b1);
            nameBoxchat2.setText(b2.getName());
            updateBoxchat(contentBoxchat2, b2);
            boxchat.setVisible(true);
            boxchat2.setVisible(true);
        }
    }

    private static class SetTimeOut {

        private static Thread thread = null;

        public SetTimeOut() {

        }

        public static void setTimeOut(Runnable runnable, int delay) {
            if (thread != null && thread.isAlive()) {
                thread.stop();
                thread = null;
            }
            thread = new Thread(() -> {
                try {
                    Thread.sleep(delay);
                    runnable.run();
                } catch (Exception e) {
                    System.err.println(e);
                }
            });
            thread.start();
        }
    }

    private class AddEventRemoveSearch implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {
            toggelSearch(false, new ArrayList<User>());
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }

    private class EventOnchageSearch implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            SetTimeOut.setTimeOut(() -> {
                toggelSearch(false, null);
                List<User> list = DUser.search(input_search.getText());
                toggelSearch(true, list);
                input_search.requestFocus();
            }, 500);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            if (input_search.getText().equals("")) {
                toggelSearch(false, new ArrayList<User>());
            } else {
                SetTimeOut.setTimeOut(() -> {
                    toggelSearch(false, null);
                    List<User> list = DUser.search(input_search.getText());
                    toggelSearch(true, list);
                    input_search.requestFocus();
                }, 500);
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {

        }
    }

    private void addLineContent(Boxchat bc, ColumnPanel cp, Message m) {
        User user = DUser.find(m.getIdUser());
        if (m.getFileName() == null || m.getFileName().equals("null")) {
            cp.add(lineChat(bc, user.getNickname(), m.getIdUser(), m.getContent(), m.getId(), m.getTime(), TypeMessage.STRING));
        } else {
            cp.add(lineChat(bc, user.getNickname(), m.getIdUser(), m.getFileName(), m.getId(), m.getTime(), TypeMessage.FILE));
        }
        cp.updateUI();
    }

    public void addLineContent(Message message) {
        Boxchat b1 = null;
        Boxchat b2 = null;
        try {
            b1 = listBoxActive.get(listBoxActive.size() - 1);
        } catch (Exception e) {
            System.err.println(e.getLocalizedMessage());
        }
        try {
            b2 = listBoxActive.get(listBoxActive.size() - 2);
        } catch (Exception e) {
            System.err.println(e);
        }
        if (b1 != null && b1.getId().equals(message.getIdGroup())) {
            b1.getListMessage().add(message);
            System.err.println("Box 1");
            addLineContent(b1, contentBoxchat, message);
        }
        if (b2 != null && b2.getId().equals(message.getIdGroup())) {
            b2.getListMessage().add(message);
            System.err.println("Box 2");
            addLineContent(b2, contentBoxchat2, message);
        }
    }

    private ColumnPanel customBoxchat(JPanel arg_boxchat_conten) {

        arg_boxchat_conten.setLayout(new BorderLayout());
        JScrollPane scroll = new JScrollPane(
                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scroll.getVerticalScrollBar().setUnitIncrement(20);
        arg_boxchat_conten.add(scroll, BorderLayout.CENTER);

        scroll.setBackground(Color.WHITE);
        scroll.setPreferredSize(new Dimension(arg_boxchat_conten.getWidth(), arg_boxchat_conten.getHeight()));
        scroll.setMaximumSize(new Dimension(arg_boxchat_conten.getWidth(), arg_boxchat_conten.getHeight()));

        ColumnPanel _boxchat_content = new ColumnPanel(scroll);
        scroll.setViewportView(_boxchat_content);
        _boxchat_content.setBackground(Color.WHITE);

        GridBagLayout lo_boxchat_content = new GridBagLayout();
        _boxchat_content.setLayout(lo_boxchat_content);

        return _boxchat_content;
    }

    private JPanel lineChat(Boxchat bc, String name, String id, String text, String idM, Timestamp time, TypeMessage typeM) {
        JPanel lineChat = new JPanel();
        lineChat.setBackground(Color.WHITE);
        lineChat.setLayout(new BorderLayout());

        JPanel con = new JPanel();
        con.setBackground(Color.WHITE);
        lineChat.add(con, BorderLayout.CENTER);

        RoundedPanel _con = new RoundedPanel(20);
        _con.setBorder(BorderFactory.createEmptyBorder(4, 2, 4, 2));
        con.add(_con);
        _con.setBackground(Color.WHITE);

        JLabel lb_name = new JLabel(name);
        lb_name.setBorder(BorderFactory.createEmptyBorder(0, 4, 0, 4));
        lineChat.add(lb_name, BorderLayout.PAGE_START);
        lb_name.setFont(new Font("Dialog", Font.PLAIN, 9));

        String lbtime = time.getHours() + ":" + time.getMinutes() + " " + time.getDate() + "/" + time.getMonth() + "/" + time.getYear();
        JLabel lb_time = new JLabel(lbtime);
        lb_time.setBorder(BorderFactory.createEmptyBorder(0, 4, 0, 4));
        lineChat.add(lb_time, BorderLayout.PAGE_END);
        lb_time.setFont(new Font("Dialog", Font.PLAIN, 9));

        if (typeM.equals(TypeMessage.FILE)) {
            _con.addMouseListener(new ActionDownloadFile(bc, idM, text));
            _con.setBackground(new Color(0, 0, 0, Float.parseFloat("0.1")));
        }

        int MAX_LENGTH_BREAK = 18;
        int length = text.length() / MAX_LENGTH_BREAK;
        text = "<html>" + text + "</html>";
        while (length > 0) {
            text = text.substring(0, length * MAX_LENGTH_BREAK + 1 + 5)
                    + "<br>"
                    + text.substring(length * MAX_LENGTH_BREAK + 1 + 5);
            length--;
        }

        JLabel content = new JLabel(text);
        _con.add(content);

        if (UserUI.getId().equals(id)) {
            con.setLayout(new FlowLayout(FlowLayout.RIGHT));
            lb_time.setHorizontalAlignment(JLabel.RIGHT);
            lb_name.setHorizontalAlignment(JLabel.RIGHT);
            lb_name.getParent().remove(lb_name);
            lb_time.getParent().remove(lb_time);
            _con.setToolTipText(lbtime);
        } else {
            con.setLayout(new FlowLayout(FlowLayout.LEFT));
            lb_time.setHorizontalAlignment(JLabel.LEFT);
            lb_name.setHorizontalAlignment(JLabel.LEFT);
            lb_time.getParent().remove(lb_time);
            _con.setToolTipText(lbtime);
        }

        return lineChat;
    }

    private class ActionDownloadFile implements MouseListener {

        private Boxchat boxchat;
        private String fileName;
        private String id;

        public ActionDownloadFile(Boxchat bc, String i, String fn) {
            boxchat = bc;
            fileName = fn;
            id = i;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            System.out.println("Down load file");
            JFileChooser fileDialog = new JFileChooser();
            fileDialog.setCurrentDirectory(new java.io.File("."));
            fileDialog.setDialogTitle("Chọn thư mục lưu trữ");
            fileDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            //
            // disable the "All files" option.
            //
            fileDialog.setAcceptAllFileFilterUsed(false);
            //    
            if (fileDialog.showOpenDialog(_this) == JFileChooser.APPROVE_OPTION) {
                System.out.println("getCurrentDirectory(): "
                        + fileDialog.getCurrentDirectory());
                System.out.println("getSelectedFile() : "
                        + fileDialog.getSelectedFile());
                String path = fileDialog.getSelectedFile() + "\\" + fileName;
                System.err.println("path: " + path);
                File file = new File(path);
                FileWriter fw;
                try {
                    fw = new FileWriter(file);
                    Message m = DMessage.findById(id);
                    fw.write(m.getContent());
                    fw.flush();
                    fw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("No Selection ");
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }

    private JPanel lineHistory(Room room) {
        JPanel lineHistory = new JPanel();
        lineHistory.setLayout(new BorderLayout());
        lineHistory.setBorder(BorderFactory.createEmptyBorder(4, 0, 4, 0));
        lineHistory.setBackground(Color.WHITE);

        JPanel content = new JPanel();
        content.setBackground(Color.WHITE);
        lineHistory.add(content, BorderLayout.CENTER);
        content.setLayout(new BorderLayout());

        JLabel lb_name = new JLabel(room.getName());
        content.add(lb_name, BorderLayout.NORTH);
        lb_name.setBorder(BorderFactory.createEmptyBorder(4, 8, 0, 0));
        JLabel lb_content = new JLabel("Id: " + room.getId());
        content.add(lb_content, BorderLayout.CENTER);
        lb_content.setBorder(BorderFactory.createEmptyBorder(0, 4, 4, 0));
        lb_content.setMaximumSize(new Dimension(100, 30));
        lb_content.setPreferredSize(new Dimension(100, 30));

        lb_content.setFont(new Font("Dialog", Font.PLAIN, 10));

//        BufferedImage myPicture = null;
//        try {
//            myPicture = ImageIO.read(new URL("https://thumbs.dreamstime.com/b/default-avatar-profile-vector-user-profile-default-avatar-profile-vector-user-profile-profile-179376714.jpg"));
//        } catch (IOException ex) {
//            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
//        }
        RoundedPanel avatar = new RoundedPanel(20);
        avatar.setBackground(Color.WHITE);
        JLabel picLabel = new JLabel("Avatar");
        avatar.add(picLabel);
        picLabel.setPreferredSize(new Dimension(40, 40));
        picLabel.setMaximumSize(new Dimension(40, 40));
        lineHistory.add(avatar, BorderLayout.WEST);
        return lineHistory;
    }

    private void customHistory(JPanel _history) {
        _history.setLayout(new BorderLayout());

        JScrollPane scroll = new JScrollPane(
                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        _history.add(scroll, BorderLayout.CENTER);

        scroll.setBackground(Color.WHITE);
        scroll.setPreferredSize(new Dimension(_history.getWidth(), _history.getHeight()));
        scroll.setMaximumSize(new Dimension(_history.getWidth(), _history.getHeight()));

        _history_content = new JPanel();
        scroll.setViewportView(_history_content);
        _history_content.setBackground(Color.WHITE);

        GridBagLayout lo_boxchat_content = new GridBagLayout();
        _history_content.setLayout(lo_boxchat_content);
        GridBagConstraints cons = new GridBagConstraints();
        cons.fill = GridBagConstraints.HORIZONTAL;
        cons.weightx = 1d;
        cons.weighty = 10;
        for (int i = 0; i < listRoomData.size(); i++) {
            cons.gridy = i;
            listRoomHistory.add(lineHistory(listRoomData.get(i)));
            _history_content.add(listRoomHistory.get(i), cons);
        }
    }
    private JPanel _history_content;

    public void updateHistory(Room room) {
        listRoomData.add(room);
        createSocket(room);

        GridBagConstraints cons = new GridBagConstraints();
        cons.fill = GridBagConstraints.HORIZONTAL;
        cons.weightx = 1d;
        cons.weighty = 10;
        cons.gridy = listRoomData.size() - 1;

        listRoomHistory.add(lineHistory(listRoomData.get(listRoomData.size() - 1)));
        _history_content.add(listRoomHistory.get(listRoomData.size() - 1), cons);
        listRoomHistory.get(listRoomData.size() - 1).addMouseListener(
                new HandelClickChat(listRoomData.get(listRoomData.size() - 1).getId(), listRoomData.get(listRoomData.size() - 1).getName())
        );
        history.updateUI();
    }

    private void toggelSearch(Boolean isFocus, List<User> listUser) {
        if (isFocus.equals(true)) {
            if (null == jFrameSearch) {
                jFrameSearch = new JDialog(this, false);
                jFrameSearch.setUndecorated(true);
                jFrameSearch.setResizable(false);
                jFrameSearch.getContentPane().setBackground(Color.WHITE);
                int MAX_HEIGHT_SEARCH = 300;
                setVisible(true);
                jFrameSearch.setBounds(
                        input_search.getLocationOnScreen().x,
                        input_search.getLocationOnScreen().y
                        + input_search.getHeight(),
                        input_search.getWidth(),
                        MAX_HEIGHT_SEARCH);
                jFrameSearch.setMaximumSize(new Dimension(input_search.getWidth(), 300));
                jFrameSearch.setVisible(true);
                containerSearch = new JPanel();
                jFrameSearch.getContentPane().add(containerSearch);
                containerSearch.setBorder(BorderFactory.createLineBorder(Color.GRAY));
                containerSearch.setBackground(Color.WHITE);
                containerSearch.setLayout(new BorderLayout());

                JScrollPane scroll = new JScrollPane(
                        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                containerSearch.add(scroll, BorderLayout.CENTER);

                scroll.setBackground(Color.WHITE);
                scroll.setPreferredSize(new Dimension(containerSearch.getWidth(), containerSearch.getHeight()));
                scroll.setMaximumSize(new Dimension(containerSearch.getWidth(), containerSearch.getHeight()));

                ColumnPanel search = new ColumnPanel(scroll);
                scroll.setViewportView(search);
                search.setBackground(Color.WHITE);

                GridBagLayout lo_search = new GridBagLayout();
                search.setLayout(lo_search);

                for (User user : listUser) {
                    search.add(lineSearch(user));
                }
                containerSearch.updateUI();
            }
        } else {
            if (null != jFrameSearch) {
                jFrameSearch.dispose();
                jFrameSearch = null;
            }
        }
    }

    private JPanel lineSearch(User user) {
        JPanel lineHistory = new JPanel();
        lineHistory.setLayout(new BorderLayout());
        lineHistory.setBorder(BorderFactory.createEmptyBorder(4, 0, 4, 0));
        lineHistory.setBackground(Color.WHITE);

        JPanel content = new JPanel();
        content.setBackground(Color.WHITE);
        lineHistory.add(content, BorderLayout.CENTER);
        content.setLayout(new BorderLayout());

        JLabel lb_name = new JLabel(user.getNickname());
        content.add(lb_name, BorderLayout.NORTH);
        lb_name.setBorder(BorderFactory.createEmptyBorder(4, 8, 0, 0));
        JLabel lb_content = new JLabel(user.getId());
        content.add(lb_content, BorderLayout.CENTER);
        lb_content.setBorder(BorderFactory.createEmptyBorder(0, 4, 4, 0));
        lb_content.setMaximumSize(new Dimension(100, 30));
        lb_content.setPreferredSize(new Dimension(100, 30));
        lb_content.setFont(new Font("Dialog", Font.PLAIN, 10));

        RoundedPanel avatar = new RoundedPanel(20);
        avatar.setBackground(Color.WHITE);
        JLabel picLabel = new JLabel("Avatar");
        avatar.add(picLabel);
        picLabel.setPreferredSize(new Dimension(40, 40));
        picLabel.setMaximumSize(new Dimension(40, 40));
        lineHistory.add(avatar, BorderLayout.WEST);

        Button button = new Button("Thêm vào chat");
        lineHistory.add(button, BorderLayout.EAST);

        return lineHistory;
    }
}
